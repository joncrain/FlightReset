#!/bin/sh
#set -x

TOOL_NAME="Microsoft Office 365/2019/2016 for Mac Flight Reset Tool"
TOOL_VERSION="2.0"

## Copyright (c) 2018 Microsoft Corp. All rights reserved.
## Scripts are not supported under any Microsoft standard support program or service. The scripts are provided AS IS without warranty of any kind.
## Microsoft disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a 
## particular purpose. The entire risk arising out of the use or performance of the scripts and documentation remains with you. In no event shall
## Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever 
## (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary 
## loss) arising out of the use of or inability to use the sample scripts or documentation, even if Microsoft has been advised of the possibility
## of such damages.
## Feedback: pbowden@microsoft.com

# Constants
REGISTRY="$HOME/Library/Group Containers/UBF8T346G9.Office/MicrosoftRegistrationDB.reg"
WORD2016PATH="/Applications/Microsoft Word.app"
EXCEL2016PATH="/Applications/Microsoft Excel.app"
POWERPOINT2016PATH="/Applications/Microsoft PowerPoint.app"
OUTLOOK2016PATH="/Applications/Microsoft Outlook.app"
ONENOTE2016PATH="/Applications/Microsoft OneNote.app"
SCRIPTPATH=$( cd $(dirname $0) ; pwd -P )

function ShowUsage {
# Shows tool usage and parameters
	echo $TOOL_NAME - $TOOL_VERSION
	echo "Purpose: Resets the flighting configuration for Office 365/2019/2016 for Mac apps"
	echo "Usage: FlightReset"
	echo
	exit 0
}

function CheckRegistryExists {
# Check if Registry exists
if [ ! -f "$REGISTRY" ]; then
	echo "ERROR: Registry DOES NOT exist at path $REGISTRY."
	exit 1
fi
}

function CheckLaunchState {
# Checks to see if a process is running
	local RUNNING_RESULT=$(ps ax | grep -v grep | grep "$1")
	if [ "${#RUNNING_RESULT}" -gt 0 ]; then
		echo "1"
	else
		echo "0"
	fi
}

function ContactURL {
# Check to see if we get a response from a URL request
	local URL="$1"
	URLRESULT=$(curl --head -s $URL | awk '/HTTP/' | cut -d ' ' -f2)
	echo $URLRESULT
}

function GetNodeId {
# Get node_id value from Registry
	local NAME="$1"
	local PARENT="$2"
	local NODEVALUE=$(sqlite3 "$REGISTRY" "SELECT node_id from HKEY_CURRENT_USER WHERE name='$NAME' AND parent_id=$PARENT;")
	if [ "$NODEVALUE" == '' ]; then
		echo "0"
	else
		echo "$NODEVALUE"
	fi
}

function GetNodeVal {
# Get node value from Registry
	local NAME="$1"
	local NODEID="$2"
	local NODEVALUE=$(sqlite3 "$REGISTRY" "SELECT node_id from HKEY_CURRENT_USER_values WHERE name='$NAME' AND parent_id=$NODEID;")
	if [ "$NODEVALUE" == '' ]; then
		echo "0"
	else
		echo "$NODEVALUE"
	fi
}

function DeleteValue {
# Delete value from Registry
	local NAME="$1"
	local NODEID="$2"
	sqlite3 "$REGISTRY" "DELETE FROM HKEY_CURRENT_USER_values WHERE name='$NAME' and node_id=$NODEID;"
}

function RemoveFlightData {
# Remove all flighting keys from the specified app
	local KEY_APP="$1"
	# If the flight keys are set, remove the existing values
	KEY_UPDATETIME=($GetNodeVal "FlightUpdateTime" "$KEY_APP")
	if [ "$KEY_UPDATETIME" != "0" ]; then
		DeleteValue "FlightUpdateTime" "$KEY_APP"
	fi
	KEY_ETAG=($GetNodeVal "ETag" "$KEY_APP")
	if [ "$KEY_ETAG" != "0" ]; then
		DeleteValue "ETag" "$KEY_APP"
	fi
	KEY_IMPRESSION=($GetNodeVal "ImpressionId" "$KEY_APP")
	if [ "$KEY_IMPRESSION" != "0" ]; then
		DeleteValue "ImpressionId" "$KEY_APP"
	fi
	KEY_EXPIRES=($GetNodeVal "Expires" "$KEY_APP")
	if [ "$KEY_EXPIRES" != "0" ]; then
		DeleteValue "Expires" "$KEY_APP"
	fi
	KEY_DEFERRED=($GetNodeVal "DeferredConfigs" "$KEY_APP")
	if [ "$KEY_DEFERRED" != "0" ]; then
		DeleteValue "DeferredConfigs" "$KEY_APP"
	fi
	KEY_CONFIGID=($GetNodeVal "ConfigIds" "$KEY_APP")
	if [ "$KEY_CONFIGID" != "0" ]; then
		DeleteValue "ConfigIds" "$KEY_APP"
	fi
	KEY_NUMBERLINES=($GetNodeVal "FlightNumberlines" "$KEY_APP")
	if [ "$KEY_NUMBERLINES" != "0" ]; then
		DeleteValue "FlightNumberlines" "$KEY_APP"
	fi
	KEY_TASREQ=($GetNodeVal "TasRequestPending" "$KEY_APP")
	if [ "$KEY_TASREQ" != "0" ]; then
		DeleteValue "TasRequestPending" "$KEY_APP"
	fi
	KEY_FLVER=($GetNodeVal "FlightingVersion" "$KEY_APP")
	if [ "$KEY_FLVER" != "0" ]; then
		DeleteValue "FlightingVersion" "$KEY_APP"
	fi
}

# Evaluate command-line arguments
if [[ $# = 0 ]]; then
	RUNMODE=true
else
	ShowUsage
fi

## Main
# Check that MicrosoftRegistryDB.reg actually exists.
CheckRegistryExists
# Check to see if the flighting server is online
FLIGHTRESPONSE=$(ContactURL "https://client-office365-tas.msedge.net/ab?")
echo "Contacting flighting server: $FLIGHTRESPONSE"
# Walk the registry to find the id of the node that we need
KEY_SOFTWARE=$(GetNodeId "Software" '-1')
KEY_MICROSOFT=$(GetNodeId "Microsoft" "$KEY_SOFTWARE")
KEY_OFFICE=$(GetNodeId "Office" "$KEY_MICROSOFT")
KEY_VERSION=$(GetNodeId "16.0" "$KEY_OFFICE")
KEY_COMMON=$(GetNodeId "Common" "$KEY_VERSION")
KEY_TAS=$(GetNodeId "ExperimentTAS" "$KEY_COMMON")
KEY_WORD=$(GetNodeId "word" "$KEY_TAS")
KEY_EXCEL=$(GetNodeId "excel" "$KEY_TAS")
KEY_POWERPOINT=$(GetNodeId "powerpoint" "$KEY_TAS")
KEY_OUTLOOK=$(GetNodeId "outlook" "$KEY_TAS")
KEY_ONENOTE=$(GetNodeId "onenote" "$KEY_TAS")
KEY_LICENSING=$(GetNodeId "licensingdaemon" "$KEY_TAS")

RemoveFlightData "$KEY_WORD"
RemoveFlightData "$KEY_EXCEL"
RemoveFlightData "$KEY_POWERPOINT"
RemoveFlightData "$KEY_OUTLOOK"
RemoveFlightData "$KEY_ONENOTE"
RemoveFlightData "$KEY_LICENSING"

echo "Existing flight data removed."

# If Office apps are already running, show a warning that the settings won't take effect until a restart occurs
WORDRUNSTATE=$(CheckLaunchState "$WORD2016PATH")
if [ "$WORDRUNSTATE" == "1" ]; then
	echo "Word must be restarted to refresh the flight settings."
fi
EXCELRUNSTATE=$(CheckLaunchState "$EXCEL2016PATH")
if [ "$EXCELRUNSTATE" == "1" ]; then
	echo "Excel must be restarted to refresh the flight settings."
fi
POWERPOINTRUNSTATE=$(CheckLaunchState "$POWERPOINT2016PATH")
if [ "$POWERPOINTRUNSTATE" == "1" ]; then
	echo "PowerPoint must be restarted to refresh the flight settings."
fi
OUTLOOKRUNSTATE=$(CheckLaunchState "$OUTLOOK2016PATH")
if [ "$OUTLOOKRUNSTATE" == "1" ]; then
	echo "Outlook must be restarted to refresh the flight settings."
fi
ONENOTERUNSTATE=$(CheckLaunchState "$ONENOTE2016PATH")
if [ "$ONENOTERUNSTATE" == "1" ]; then
	echo "OneNote must be restarted to refresh the flight settings."
fi


exit 0
